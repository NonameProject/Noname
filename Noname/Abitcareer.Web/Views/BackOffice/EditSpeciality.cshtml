@using Abitcareer.Mvc.ViewModels.LocalizedViewModels
@using System.Web
@using System.Globalization
@using System.Web.Mvc
@using System.Text.RegularExpressions

@model SpecialityViewModel
@{
    Model.Prices["TopUniversityPrice"] /= 12;
    Model.Prices["MiddleUniversityPrice"] /= 12;
    Model.Prices["LowUniversityPrice"] /= 12;
    
}
    @using (@Html.BeginForm("Save", "BackOffice", FormMethod.Post, new { @role="form", id = "editor" }))
    {        
        <button id="exit" type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        @Html.HiddenFor(x => x.Id)
        <h2>@LocalizationResx.EditSpeciality</h2>
        @Html.LabelFor(m=>m.Name, LocalizationResx.NameUA)
        @Html.EditorFor(m => m.Name)
        <br />
        @Html.LabelFor(m => m.EnglishName, LocalizationResx.NameEN)
        @Html.EditorFor(m => m.EnglishName)
        <br />
        <span id="js-validation" class="error-text"></span>
        <article class="left">
            <h4>@LocalizationResx.Salaries.ToUpper()</h4>
    
            <ul class="salaries">
                @foreach (var item in Model.Salaries)
                {
                    string yearEnding = LocalizationResx.EndAfterFour;
                    <li>
                        @if (item.Key < 10 || item.Key > 20)
                        {
                            switch (item.Key % 10)
                            {
                            case 1:
                                yearEnding = LocalizationResx.FirstEnd;
                                break;
                            case 2:
                                yearEnding = LocalizationResx.SecondEnd;
                                break;
                            case 3:
                                yearEnding = LocalizationResx.ThirdEnd;
                                break;
                            default:
                                yearEnding = LocalizationResx.EndAfterFour;
                                break;
                            }
                        }
                        @Html.LabelFor(m => m.Salaries[item.Key], item.Key.ToString() + '-' + yearEnding + ' ' + LocalizationResx.Year)
                        @Html.EditorFor(m => m.Salaries[item.Key], new { @class = "form-control" })
                    </li>
                }
                </ul>
        <ul class="tuition-fee">
            <li>
                @Html.LabelFor(m => m.Prices["TopUniversityPrice"], LocalizationResx.Payment +' '+ LocalizationResx.FirstPaymentName)
                @Html.EditorFor(m => m.Prices["TopUniversityPrice"])
        
                @Html.LabelFor(m => m.Prices["MiddleUniversityPrice"], LocalizationResx.Payment +' '+ LocalizationResx.SecondPaymentName)
                @Html.EditorFor(m => m.Prices["MiddleUniversityPrice"])
   
                @Html.LabelFor(m => m.Prices["LowUniversityPrice"],LocalizationResx.Payment +' '+ LocalizationResx.ThirdPaymentName)
                @Html.EditorFor(m => m.Prices["LowUniversityPrice"])
            </li>
        </ul>
            </article>
        <div class="clear"></div>
        <div class="row">        
            <button type="submit" class="btn btn-primary right">@LocalizationResx.Save</button>
            <input type="button" id="exitButton" class="btn btn-default right" value="@LocalizationResx.Cancel"/>
        </div>
    }
<script>
    $(document).ready(function () {
        SpecialityEditor.init({
            ValidationNameCannotBeEmpty: "@LocalizationResx.ValidationNameCannotBeEmpty",

            SpecialityChangeSuccess: "@LocalizationResx.SpecialityEditingSuccess",

            SpecialityChangeFailed: "@LocalizationResx.SpecialityEditingFailed"
        });
    });
</script>