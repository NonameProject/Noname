@using Abitcareer.Mvc.ViewModels.LocalizedViewModels
@using System.Web
@using System.Globalization
@using System.Web.Mvc
@using System.Text.RegularExpressions

@model SpecialityViewModel
    @using (@Html.BeginForm("Save", "BackOffice", FormMethod.Post, new { @role="form", id = "editor" }))
    {        
        <input type="button" id="exit"/>
        @Html.HiddenFor(x => x.Id)
        <h3>@LocalizationResx.EditSpeciality</h3>
        <h4>@LocalizationResx.Speciality.ToUpper()</h4>
        @Html.LabelFor(m=>m.Name, LocalizationResx.NameUA)
        @Html.EditorFor(m => m.Name)
        <br />
        @Html.LabelFor(m => m.EnglishName, LocalizationResx.NameEN)
        @Html.EditorFor(m => m.EnglishName)
        <br />
        <span id="js-validation" class="error-text"></span>
        <h4>@LocalizationResx.Salaries.ToUpper()</h4>
        
        <ul class="salaries">
            @foreach (var item in Model.Salaries)
            {
                string yearEnding = LocalizationResx.EndAfterFour;
                <li>
                    @if(item.Key < 10 || item.Key > 20){
                        switch(item.Key%10){
                            case 1:
                                yearEnding = LocalizationResx.FirstEnd;
                                break;
                            case 2:
                                yearEnding = LocalizationResx.SecondEnd;
                                break;
                            case 3:
                                yearEnding = LocalizationResx.ThirdEnd;
                                break;
                            default:
                                yearEnding = LocalizationResx.EndAfterFour;
                                break;
                        }
                    }

                    @Html.LabelFor(m => m.Salaries[item.Key], item.Key.ToString() + '-' + yearEnding + ' ' + LocalizationResx.Year)
                    @Html.EditorFor(m => m.Salaries[item.Key], new { @class = "form-control", min=0})
                </li>
            }
            </ul>
        <div class="row">
            <button type="button" class="btn btn-danger left" id="delete">Удалить</button>            
            <button type="submit" class="btn btn-default right">@LocalizationResx.Save</button>
            <input type="button" id="exitButton" class="btn btn-default right" value="@LocalizationResx.Cancel"/>
        </div>
    }
<script>
    $("ul.salaries li input").attr("min", 0);
    $("#editor").submit(function (event) {
        if ($('#Name').val().length == 0 || $('#EnglishName').val().length == 0 )
        {
            $("#js-validation").html('@LocalizationResx.ValidationNameCannotBeEmpty');
            event.preventDefault();
            return false;
        }
        var data = $(this).serialize();
        var url = $(this).attr("action");
        $.post(url, data, function (d) {
            if (d)
            {
                function compareNumeric(a, b) {
                    if (a > b) return 1;
                    if (a < b) return -1;
                    if (a == b) return 0;
                }
                function changeToString(a)
                {
                    if (!a)
                        a = '0';
                    return a;
                }
                Notificate("@LocalizationResx.SpecialityAditingSuccess");
                var culture = getCulture();
                var newName;

                var arrayOfSalaries = [];
                for (var i = 1; i <= 5; i++) {
                    var a = parseInt(changeToString($('input[name="Salaries[' + i + ']"]').val()));
                    arrayOfSalaries.push(a);
                }
                var a1 = parseInt(changeToString($('input[name="Salaries[10]"]').val()));
                arrayOfSalaries.push(a1);

                var a2 = parseInt(changeToString($('input[name="Salaries[20]"]').val()));
                arrayOfSalaries.push(a2);

                arrayOfSalaries.sort(compareNumeric);
                 
                if (culture == 'en-us')
                    newName = $('#EnglishName').val();
                else newName = $('#Name').val();
                $('#partialView').hide();
                $('#@Model.Id').addClass("edited");
                $('#@Model.Id div.name').html(newName);
                $('#@Model.Id div.salary-wrapper').html('<h4>'+arrayOfSalaries[0]+'-'+arrayOfSalaries[6]+'<h4>');
                setTimeout(function () { $('#@Model.Id').removeClass("edited"); }, 5000);
            }
            else
                Notificate("@LocalizationResx.SpecialityAditingFailed");
        });
        event.preventDefault();
    });
    $('#exitButton').click(function () {
        $('#partialView').hide();
    });

    $("#delete").click(function () {
        $.ajax(
        {
            url: "deletespeciality",
            type: "POST",
            data: {id : '@Model.Id'},
            success: function()
            {
                $('#partialView').hide();
                $("#@Model.Id").remove();
            }
        });
    });

    $('#exit').click(function () {
        $('#partialView').hide();
    });
</script>