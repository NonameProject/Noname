@model Abitcareer.Mvc.ViewModels.LocalizedViewModels.SpecialityViewModel

@using (Html.BeginForm("AddSpeciality", "BackOffice", FormMethod.Post, new { Id = "editor", onsubmit = "return false" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
        <button id="exit" type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        @Html.HiddenFor(x => x.Id)   
    
        <h2>@LocalizationResx.AddSpeciality</h2>
        <h4>@LocalizationResx.Speciality.ToUpper()</h4>
        
        @Html.LabelFor(m => m.Name, LocalizationResx.NameUA)
        @Html.EditorFor(m => m.Name)
        <br />
        @Html.LabelFor(m => m.EnglishName, LocalizationResx.NameEN)
        @Html.EditorFor(m => m.EnglishName)
        <br />
        <span id="js-validation" class="error-text"></span>
        <!--<article class="right">
            <h4>@LocalizationResx.Salaries.ToUpper()</h4>
    
            <ul class="salaries">
                @foreach (var item in Model.Salaries)
                {
                    string yearEnding = LocalizationResx.EndAfterFour;
                    <li>
                        @if (item.Key < 10 || item.Key > 20)
                        {
                            switch (item.Key % 10)
                            {
                            case 1:
                                yearEnding = LocalizationResx.FirstEnd;
                                break;
                            case 2:
                                yearEnding = LocalizationResx.SecondEnd;
                                break;
                            case 3:
                                yearEnding = LocalizationResx.ThirdEnd;
                                break;
                            default:
                                yearEnding = LocalizationResx.EndAfterFour;
                                break;
                            }
                        }
                        @Html.LabelFor(m => m.Salaries[item.Key], item.Key.ToString() + '-' + yearEnding + ' ' + LocalizationResx.Year)
                        @Html.EditorFor(m => m.Salaries[item.Key], new { @class = "form-control" })
                    </li>
                }
                </ul>
            </article>-->
        <article class="left">
            <h4>@LocalizationResx.Salaries.ToUpper()</h4>
    
            <ul class="salaries">
                @foreach (var item in Model.Salaries)
                {
                    string yearEnding = LocalizationResx.EndAfterFour;
                    <li>
                        @if (item.Key < 10 || item.Key > 20)
                        {
                            switch (item.Key % 10)
                            {
                            case 1:
                                yearEnding = LocalizationResx.FirstEnd;
                                break;
                            case 2:
                                yearEnding = LocalizationResx.SecondEnd;
                                break;
                            case 3:
                                yearEnding = LocalizationResx.ThirdEnd;
                                break;
                            default:
                                yearEnding = LocalizationResx.EndAfterFour;
                                break;
                            }
                        }
                        @Html.LabelFor(m => m.Salaries[item.Key], item.Key.ToString() + '-' + yearEnding + ' ' + LocalizationResx.Year)
                        @Html.EditorFor(m => m.Salaries[item.Key], new { @class = "form-control" })
                    </li>
                }
                </ul>
            </article>
    <div class="clear"></div>
       <div class="row">            
            <button type="submit" class="btn btn-primary right">@LocalizationResx.Save</button>
            <input type="button" id="exitButton" class="btn btn-default right" value="@LocalizationResx.Cancel"/>
        </div>
}

<script>
   $(document).ready(function () {
        SpecialityEditor.init({
            ValidationNameCannotBeEmpty: "@LocalizationResx.ValidationNameCannotBeEmpty",

            SpecialityAdditingSuccess: "@LocalizationResx.SpecialityAdditingSuccess",

            SpecialityAdditingFailed: "@LocalizationResx.SpecialityAditingFailed"
        });
    });
</script>
